@function breakpoint($size) {
	@return map-get($breakpoints, $size);
}

@mixin breakpoint($size) {
	@if $size == mini {
		$upperbound: breakpoint(small);
		@media screen and (max-width: $upperbound) {
			@content;
		}
	} @else if $size == tablet {
		$upperbound: breakpoint(portrait);
		@media screen and (max-width: $upperbound) {
			@content;
		}
	} @else {
		$lowerbound: breakpoint($size);
		@media screen and (min-width: $lowerbound) {
			@content;
		}
	}
}

@mixin bpmax($size) {
	$upperbound: breakpoint($size);
	@media screen and (max-width: $upperbound) {
		@content;
	}
}
@mixin bpmin($size) {
	$lowerbound: breakpoint($size) + rem(1);
	@media screen and (min-width: $lowerbound) {
		@content;
	}
}

@mixin noSelect {
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

@mixin noAction {
	pointer-events: none;
}

@mixin verticalText {
	-ms-writing-mode: tb-rl;
	-webkit-writing-mode: vertical-rl;
	writing-mode: vertical-rl;
}

@mixin responsiveText {
	font-size: rem(17);
	@include bpmax(medium) {
		font-size: rem(16);
	}
	@include bpmax(small) {
		font-size: rem(15);
	}
}

@mixin linkHover($color: $mineshaft) {
	color: $color;
	cursor: pointer;
	@include bpmin(landscape) {
		transition: color $speed * 1.5;
		display: inline-block;
		z-index: 1;
		position: relative;
		&::after {
			content: '';
			position: absolute;
			bottom: rem(2);
			height: rem(10);
			// width: 100%;
			left: 0;
			right: 0;
			z-index: -1;
			opacity: 0.7;
			background: $platinum;
			transition: transform $speed * 1.5, opacity $speed * 1.5;
			transform: scale(0, 1);
			transform-origin: 100% 0%;
		}
		&:hover {
			color: $black !important;
			&::after {
				opacity: 1;
				transform: scale(1, 1);
				transform-origin: 0% 0%;
			}
		}
	}
}

@mixin scrollOnHover($color: $mineshaft, $display: block) {
	position: relative;
	overflow: hidden;
	span[data-hover] {
		display: $display;
		transition: color $speed, transform $speed;
		&::after {
			position: absolute;
			width: 100%;
			left: 0;
			top: 100%;
			content: attr(data-hover);
			transition: opacity $speed;
			opacity: 0;
			color: $color;
		}
	}
	@include bpmin(landscape) {
		&:hover {
			span[data-hover] {
				transform: translateY(-100%);
				color: transparent;
				&::after {
					opacity: 1;
				}
			}
		}
	}
}

@mixin diagonalBackground(
	$color: $sand,
	$width: 5%,
	$size: rem(25),
	$angle: 45deg,
	$background: transparent,
	$important: false
) {
	// Assign a width between 1 and 25%
	@if ($important) {
		background-image: linear-gradient(
			$angle,
			$color $width,
			$background $width,
			$background 50%,
			$color 50%,
			$color $width + 50%,
			$background $width + 50%,
			$background
		) !important;
		background-size: $size $size !important;
	} @else {
		background-image: linear-gradient(
			$angle,
			$color $width,
			$background $width,
			$background 50%,
			$color 50%,
			$color $width + 50%,
			$background $width + 50%,
			$background
		);
		background-size: $size $size;
	}
}

@mixin dottedBackground($color: $sand, $background: transparent) {
	background-image: -webkit-repeating-radial-gradient(
		center center,
		$color,
		$color rem(1),
		$background rem(1),
		$background 100%
	);
	background-image: -moz-repeating-radial-gradient(
		center center,
		$color,
		$color rem(1),
		$background rem(1),
		$background 100%
	);
	background-image: -ms-repeating-radial-gradient(
		center center,
		$color,
		$color rem(1),
		$background rem(1),
		$background 100%
	);
	background-image: repeating-radial-gradient(
		center center,
		$color,
		$color rem(1),
		$background rem(1),
		$background 100%
	);
	-webkit-background-size: rem(3) rem(3);
	-moz-background-size: rem(3) rem(3);
	background-size: rem(3) rem(3);
}

@mixin textGlitch(
	$name,
	$intensity,
	$textColor,
	$background,
	$highlightColor1,
	$highlightColor2,
	$width,
	$height
) {
	color: $textColor;
	position: relative;
	$steps: $intensity;

	@at-root {
		@for $i from 1 through 2 {
			@keyframes #{$name}-anim-#{$i} {
				@for $i from 0 through $steps {
					#{percentage($i*(1/$steps))} {
						clip: rect(rem(random($height)), rem($width), rem(random($height)), 0);
					}
				}
			}
		}
	}
	&::before,
	&::after {
		content: attr(data-text);
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		background: $background;
		clip: rect(0, 0, 0, 0);
	}
	&::after {
		left: rem(2);
		text-shadow: rem(-1) 0 $highlightColor1;
		animation: (#{$name}-anim-1 2s infinite linear alternate-reverse);
	}
	&::before {
		left: rem(-2);
		text-shadow: rem(2) 0 $highlightColor2;
		animation: (#{$name}-anim-2 3s infinite linear alternate-reverse);
	}
}

// Absolute vertical centering
@mixin verticalCenter {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}

// Absolute horizontal centering
@mixin horizontalCenter {
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}

// Absolute vertical and horizontal centering
@mixin absoluteCenter {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin placeholder($color) {
	&:-moz-placeholder {
		color: $color;
		opacity: 1;
	}
	&::-moz-placeholder {
		color: $color;
		opacity: 1;
	}
	&:-ms-input-placeholder {
		color: $color;
	}
	&::-webkit-input-placeholder {
		color: $color;
	}
}

// replacement for overflow hidden
@mixin clipBox {
	clip-path: polygon(0 0, 0 100%, 100% 100%, 100% 0);
}
